1.不等于
{status:{$ne:"TIMEOUT"}}
db.getCollection("t_bcall_command_record").find(
    { 
        "status" : {
            "$ne" : "TIMEOUT"
        }
    }
);

db.orders.aggregate([{$group: {"_id": {"hour": {$hour: "$order_date"}},count:{$sum: 1}}}])

{ "_id" : 1, "item" : "apple", "qty" : 5, "order_date" : ISODate("2018-03-10T03:00:00Z") }
{ "_id" : 2, "item" : "pie", "qty" : 10, "order_date" : ISODate("2018-03-12T01:00:00Z") }
{ "_id" : 4, "item" : "apple", "qty" : 5, "order_date" : ISODate("2018-03-10T06:00:00Z") }
{ "_id" : 3, "item" : "pie", "qty" : 10, "order_date" : ISODate("2018-03-12T01:00:00Z") }
{ "_id" : 6, "item" : "apple", "qty" : 5, "order_date" : ISODate("2018-03-10T04:00:00Z") }
{ "_id" : 5, "item" : "pie", "qty" : 10, "order_date" : ISODate("2018-03-12T02:00:00Z") }

按两小时划分：
0-1
2-3
4-5
6-7
8-9
10-11
12-13
14-15
16-17
18-19
20-21
22-23
语句：db.orders.aggregate([{$group: {"_id": {"H": { $floor: { $divide: [ { $hour: "$order_date" }, 2 ] } }},count:{$sum: 1}}}])
结果：
{ "_id" : { "H" : 2 }, "count" : 1 }
{ "_id" : { "H" : 3 }, "count" : 1 }
{ "_id" : { "H" : 0 }, "count" : 2 }
{ "_id" : { "H" : 1 }, "count" : 2 }
描述：H的值表示上述分组编号，从0开始；



该语句是把小时作为id输出：
db.orders.aggregate([{$group: {"_id": {"hour": {$hour: "$order_date"},"H": { $floor: { $divide: [ { $hour: "$order_date" }, 2 ] } }},count:{$sum: 1}}}])
结果：
{ "_id" : { "hour" : 3, "H" : 1 }, "count" : 1 }
{ "_id" : { "hour" : 1, "H" : 0 }, "count" : 2 }
{ "_id" : { "hour" : 6, "H" : 3 }, "count" : 1 }
{ "_id" : { "hour" : 2, "H" : 1 }, "count" : 1 }
{ "_id" : { "hour" : 4, "H" : 2 }, "count" : 1 }























// Requires official Java MongoDB Driver 2.14+
import com.mongodb.AggregationOptions;
import com.mongodb.BasicDBObject;
import com.mongodb.Cursor;
import com.mongodb.DB;
import com.mongodb.DBCollection;
import com.mongodb.DBObject;
import com.mongodb.MongoClient;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Arrays;
import java.util.List;

public class Program {
    
    public static void main(String[] args) throws ParseException {
        
        try {
            
            MongoClient client = new MongoClient("localhost", 27017);
            
            try {
                
                DB database = client.getDB("bu4-sensetime-logs");
                DBCollection collection = database.getCollection("save_or_take_history");
                
                // Created with Studio 3T, the IDE for MongoDB - https://studio3t.com/
                
                List<DBObject> pipeline = Arrays.asList(
                        new BasicDBObject()
                                .append("$match", new BasicDBObject()
                                        .append("accessTime", new BasicDBObject()
                                                .append("$gte", 1.554048E12)
                                                .append("$lte", 1.554134399E12)
                                        )
                                ), 
                        new BasicDBObject()
                                .append("$project", new BasicDBObject()
                                        .append("date", new BasicDBObject()
                                                .append("$add", Arrays.asList(
                                                        "$accessTime",
                                                        2.88E7
                                                    )
                                                )
                                        )
                                ), 
                        new BasicDBObject()
                                .append("$project", new BasicDBObject()
                                        .append("accessDate", new BasicDBObject()
                                                .append("$add", Arrays.asList(
                                                        new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSSZ").parse("2019-04-01 16:52:25.836+0800"),
                                                        "$date"
                                                    )
                                                )
                                        )
                                ), 
                        new BasicDBObject()
                                .append("$group", new BasicDBObject()
                                        .append("_id", new BasicDBObject()
                                                .append("H", new BasicDBObject()
                                                        .append("$floor", new BasicDBObject()
                                                                .append("$divide", Arrays.asList(
                                                                        new BasicDBObject()
                                                                                .append("$hour", "$accessDate"),
                                                                        2.0
                                                                    )
                                                                )
                                                        )
                                                )
                                        )
                                        .append("count", new BasicDBObject()
                                                .append("$sum", 1.0)
                                        )
                                ), 
                        new BasicDBObject()
                                .append("$project", new BasicDBObject()
                                        .append("_id", "$_id.H")
                                        .append("count", 1.0)
                                ), 
                        new BasicDBObject()
                                .append("$sort", new BasicDBObject()
                                        .append("_id", 1.0)
                                )
                );
                AggregationOptions options = AggregationOptions.builder()
                        // always use cursor mode
                        .outputMode(AggregationOptions.OutputMode.CURSOR)
                        .allowDiskUse(false)
                        .build();
                        
                        
                Cursor cursor = collection.aggregate(pipeline, options);
                while (cursor.hasNext()) {
                    BasicDBObject document = (BasicDBObject) cursor.next();
                    System.out.println(document.toString());
                }
                
            } finally {
                client.close();
            }
            
        } catch (Exception e) {
            // handle exception
        }
    }
    
}


//聚合管道查询
db.getCollection("save_or_take_history").aggregate(

	// Pipeline
	[
		// Stage 1
		{
			$match: {
				"accessTime":{
					"$gte":1554048000000,
					"$lte":1554134399000
				},
				"deviceId":"string"
			}
		},

		// Stage 2
		{
			$group: {
				"_id":{"userLogId":"$userId","type":"$accessType"},
				"accessTime":{
					"$max":"$accessTime"
				}
				
			}
		},

		// Stage 3
		{
			$project: {
			    "userLogId":"$_id.userLogId",
			    "type":"$_id.type",
			    "accessTime":"$accessTime",
			    "_id":0
			}
		},

		// Stage 4
		{
			$group: {
				"_id":"$userLogId",
				"saveTime":{
					"$max":{"$cond":[{"$eq":["$type",1]},"$accessTime",1554048000000]}
				},
				"takeTime":{
					"$max":{"$cond":[{"$eq":["$type",2]},"$accessTime",1554134399000]}
				}
			}
		},

		// Stage 5
		{
			$match: {
			
			}
		},

	]

	// Created with Studio 3T, the IDE for MongoDB - https://studio3t.com/

);


mongo插入更新操作：
Query query = new Query();
query.addCriteria(Criteria.where("saveOrTakeLogId").is(logInfoForMongo.getSaveOrTakeLogId()));
DBObject dbDoc = new BasicDBObject();
mongoTemplate.getConverter().write(logInfoForMongo, dbDoc);
mongoTemplate.upsert(query, Update.fromDBObject(dbDoc), SaveTakeLogInfoForMongo.class, Constants.SAVE_OR_TAKE_COLLECTION);